{"version":3,"sources":["Header.js","Items.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Items","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickHandler","count","state","table","id","Math","round","random","tr","key","style","backgroundColor","length","concat","onClick","onItemSave","onItemRem","fontSize","push","setState","renderTable","map","index","uid","name","document","getElementById","price","quantity","save","rem","total","message","items","grandTotal","value","innerHTML","filter","item","toFixed","display","disabled","reduce","prev","curr","i","splice","cellSpacing","colSpan","Component","App","onAddNewHandler","Items_Items","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9426756f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <span>Retail Invoice</span>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Items extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0,\r\n            table: [],\r\n            grandTotal: 0,\r\n            items: []\r\n        }\r\n    }\r\n\r\n    onClickHandler = () => {\r\n        let count = this.state.count;\r\n        let table = this.state.table;\r\n        let id = 'REF'+Math.round(Math.random()*999);\r\n        count++;\r\n        let tr = (\r\n                <tr key={id} style={{backgroundColor: table.length%2===0? 'rgb(247, 247, 247)': 'rgb(255, 255, 255)'}}>\r\n                    <td className=\"table-no\">{id}</td>\r\n                    <td><input id={`name${count}`} /></td>\r\n                    <td><input id={`price${count}`} /></td>\r\n                    <td><input id={`quantity${count}`} /></td>\r\n                    <td id={`total${count}`} className=\"table-single-total\">$0.00</td>\r\n                    <td className=\"add-rem\">\r\n                        <span id={`save${count}`} onClick={() => this.onItemSave(count, id)} className=\"table-add\"><i className='fas fa-save'></i></span>\r\n                        <span id={`rem${count}`} onClick={() => this.onItemRem(count, id)} className=\"table-rem\"><i className='fas fa-minus-circle' style={{fontSize: '10pt'}}></i></span>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        table.push(tr)\r\n        this.setState({count, table});\r\n    }\r\n\r\n    renderTable = () => {\r\n        let table = this.state.table;\r\n        return table.length === 0? null: table.map(tr => tr);\r\n    }\r\n\r\n    onItemSave = (index, uid) => {\r\n        let name = document.getElementById('name'+index);\r\n        let price = document.getElementById('price'+index);\r\n        let quantity = document.getElementById('quantity'+index);\r\n        let save = document.getElementById('save'+index);\r\n        let rem = document.getElementById('rem'+index);\r\n        let total = document.getElementById('total'+index);\r\n        let message = document.getElementById('table-message');             \r\n        let items = this.state.items;\r\n        let grandTotal = 0;\r\n        \r\n        if(name.value === '' || price.value === '' || quantity.value === '')\r\n            message.innerHTML = 'Cannot be empty!';\r\n        else {\r\n            message.innerHTML = '';\r\n            if((items.filter((item)=> {\r\n                if(item[1] === name.value) {\r\n                    message.innerHTML = 'Already exists!';\r\n                    return [];\r\n                }\r\n            })).length !== 0) return;\r\n            items.push([uid, name.value, price.value, quantity.value]);\r\n\r\n            total.innerHTML = '$'+(price.value*quantity.value).toFixed(2);\r\n            save.style.display = 'none';\r\n            rem.style.display = 'block';\r\n\r\n            //DISABLE INPUTS\r\n            name.disabled = true;\r\n            price.disabled = true;\r\n            quantity.disabled = true;\r\n            grandTotal = items.reduce((prev, curr) => prev + (curr[2]*curr[3]), 0);            \r\n            this.setState({items, grandTotal});\r\n        }\r\n    }\r\n\r\n    onItemRem = (count, id) => {\r\n        let table = this.state.table;\r\n        let items = this.state.items;        \r\n        for(let i=0; i<items.length; i++) {\r\n            if(items[i][0] === id) {\r\n                items.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        for(let i=0; i<table.length; i++) {\r\n            if(table[i].key === id) {\r\n                table.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        let grandTotal = items.reduce((prev, curr) => prev + (curr[2]*curr[3]), 0);\r\n        this.setState({table, items, grandTotal});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"table-container\">\r\n                <table cellSpacing=\"1vh\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th className=\"table-no\">UID</th>\r\n                            <th className=\"table-name\">Name</th>\r\n                            <th className=\"table-price\">Price</th>\r\n                            <th className=\"table-quantity\">Quantity</th>\r\n                            <th className=\"table-total\">Total</th>\r\n                            <th className=\"table-action\">Action</th>\r\n                        </tr>\r\n                        {this.renderTable()}\r\n                        <tr>\r\n                            <td id=\"table-message\" className=\"table-message\" colSpan=\"4\">\r\n                                <span className=\"table-add\" style={{fontSize: '1.4vh'}}>Hint: click on <i className='fas fa-save'></i> to update changes</span>\r\n                            </td>\r\n                            <td className=\"grand-total\">${this.state.grandTotal.toFixed(2)}</td>\r\n                            <td onClick={this.onClickHandler} className=\"table-add-btn\">Add New</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Items from './Items';\n\nexport default class App extends Component {\n\n  onAddNewHandler = () => {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Items />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}